#! /usr/bin/env python

import Params, Request, Response, fiber, weakref, logging

DOWNLOADS = weakref.WeakValueDictionary()

def Replicator( client, address ):

  logging.info(f'Accepted request from [{address[0]}:{address[1]}')

  request = Request.HttpRequest( client )
  for state in request:
    yield state

  try:
    for request in DOWNLOADS:
      protocol = DOWNLOADS[ request ]
      if protocol.Response:
        if issubclass( protocol.Response, Response.DataResponse ):
          logging.info('Joined running download')
          break
        del DOWNLOADS[ request ]
      else:
        yield fiber.WAIT()
    else:
      logging.debug(f'Switching to {request.Protocol.__name__}')
      protocol = DOWNLOADS[ request ] = request.Protocol( request )
      server = protocol.socket()
      while not protocol.Response:
        if protocol.hasdata():
          yield fiber.SEND( server, Params.TIMEOUT )
          protocol.send( server )
        else:
          yield fiber.RECV( server, Params.TIMEOUT )
          protocol.recv( server )
    logging.debug(f'Switching to {protocol.Response.__name__}')
    response = protocol.Response( protocol, request )
    server = protocol.socket()
  except Exception:
    logging.debug('Switching to ExceptionResponse')
    response = Response.ExceptionResponse( request )

  while not response.Done:
    if response.hasdata():
      yield fiber.SEND( client, Params.TIMEOUT )
      response.send( client )
    elif response.needwait():
      yield fiber.WAIT( response.needwait() )
    else:
      yield fiber.RECV( server, Params.TIMEOUT )
      response.recv( server )

  logging.info('Transaction successfully completed')

fiber.spawn(Replicator, Params.opts.listener, Params.opts.debug)
